{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","avatar","camera","scene","actionMap","faceForward","_avatar","_skeleton","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl1","Math","PI","this","_sl2","_stepOffset","_vMoveTot","_vMovStartPos","Zero","_actionMap","ActionMap","_cameraElastic","_cameraTarget","_noFirstPerson","_mode","_saveMode","_isRHS","_signRHS","_started","_stopAnim","_prevAnim","_avStartPos","_grounded","_freeFallDist","_fallFrameCountMin","_fallFrameCount","_inFreeFall","_wasWalking","_wasRunning","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_ray","One","_rayDir","_cameraSkin","_skip","_move","_isAG","_hasAnims","_camera","_scene","setAvatar","console","error","setActionMap","_checkAnimRanges","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","getScene","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","walk","speed","setRunSpeed","run","setBackSpeed","walkBack","setBackFastSpeed","walkBackFast","setJumpSpeed","idleJump","runJump","setLeftSpeed","strafeLeft","setLeftFastSpeed","strafeLeftFast","setRightSpeed","strafeRight","setRightFastSpeed","setTurnSpeed","turnLeft","turnRight","setTurnFastSpeed","turnLeftFast","turnRightFast","setGravity","setAnimationGroups","agMap","exist","ag","stop","setAnimationRanges","arMap","inActMap","inActData","keys","ccActionName","ccActData","ActionData","id","loop","rate","sound","_checkFastAnims","getActionMap","map","actDataI","actDataO","getSettings","ccs","CCSettings","isFaceForward","topDown","getMode","turningOff","isTurningOff","cameraTarget","clone","cameraElastic","gravity","keyboard","_ekb","noFirstPerson","setSettings","setFaceForward","setMode","setTurningOff","setCameraTarget","setCameraElasticity","enableKeyBoard","setNoFirstPerson","_setAnim","anim","animName","getAnimationRange","enableBlending","act","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","rangeName","setRunAnim","setWalkBackAnim","_copySlowAnims","setWalkBackFastAnim","setSlideBackAnim","slideBack","setIdleAnim","idle","setTurnRightAnim","setTurnRightFastAnim","setTurnLeftAnim","setTurnLeftFastAnim","setStrafeRightAnim","strafeRightFast","setStrafeRightFastAnim","setStrafeLeftAnim","setStrafeLeftFastAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","fall","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","b","v","copyFrom","cameraCollisionChanged","skel","f","_setRHS","mesh","meshMatrix","getWorldMatrix","_localX","FromFloatArray","_localY","_localZ","actualZ","Cross","Dot","_ff","_av2cam","_ffSign","checkAGs","_containsAG","node","ags","fromRoot","_getRoot","getChildren","indexOf","target","tn","parent","start","reset","_updateTargetValue","registerBeforeRender","unregisterBeforeRender","pauseAnim","resumeAnim","_isAvFacingCamera","forward","position","subtract","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","beginAnimation","y","disp","forwardDist","jumpDist","rotation","alpha","_moveVector","normalize","scaleToRef","_calcJumpDist","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","sign","horizDist","_speedMod","calcMovePOV","_walk","_stepLeft","_stepRight","_turnLeft","_turnRight","turnAngle","_walkback","_slp","_endFreeFall","_groundIt","_unGroundIt","addToRef","radius","lowerRadiusLimit","_snapCamera","visibility","subtractToRef","origin","direction","pi","pickWithRay","hit","newPos","pickedPoint","scale","nr","repeat","canvas","getRenderingCanvas","addEventListener","removeEventListener","jump","isAg","_findSkel","_root","skeleton","ms","getChildMeshes","cm","rootNode","animationGroups","getAvatar","setAvatarSkeleton","_skelDrivenByAG","animations","some","sa","children","getSkeleton","ds","dk"],"mappings":"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","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Node,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    TargetedAnimation,\r\n    Matrix,\r\n    DeepImmutable\r\n} from \"babylonjs\";\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh = null;;\r\n    private _skeleton: Skeleton = null;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl1: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = Vector3.Zero();\r\n\r\n\r\n    private _actionMap: ActionMap = new ActionMap();\r\n\r\n    private _cameraElastic: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl1 = Math.PI * this._minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._actionMap.walk.speed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._actionMap.run.speed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._actionMap.walkBack.speed = n;\r\n    }\r\n    public setBackFastSpeed(n: number) {\r\n        this._actionMap.walkBackFast.speed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._actionMap.idleJump.speed = n;\r\n        this._actionMap.runJump.speed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._actionMap.strafeLeft.speed = n;\r\n    }\r\n    public setLeftFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._actionMap.strafeRight.speed = n;\r\n    }\r\n    public setRightFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._actionMap.turnLeft.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRight.speed = n * Math.PI / 180;\r\n    }\r\n    public setTurnFastSpeed(n: number) {\r\n        this._actionMap.turnLeftFast.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRightFast.speed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *  \"run\" : {\"ag\":myRunAnimationGroup,\"rate\":1},\r\n     *  \"idle\" : {\"ag\":myIdleAnimationGroup,\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        if (this._prevAnim != null && this._prevAnim.exist) this._prevAnim.ag.stop();\r\n        this._isAG = true;\r\n        this.setActionMap(<ActionMap>agMap);\r\n    }\r\n\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        this.setActionMap(<ActionMap>arMap);\r\n    }\r\n\r\n    /**\r\n     * updates action data in the cc actionMap\r\n     * with action data from the provided/input actionMap \r\n     * \r\n     * \r\n     * return \"ar\" or \"ag\" depending on if the data provided\r\n     * was animation range or animation group data respt.\r\n     * \r\n     * TODO should validate provided data.\r\n     * In other words if animation range provided make sure\r\n     * the range exist in the skeleton\r\n     * or if animation group provided make sure the animation group\r\n     * can be played on this avataor\r\n     * \r\n     * @param inActMap \r\n     * @returns \r\n     */\r\n    public setActionMap(inActMap: ActionMap): string {\r\n        let agMap: boolean = false;\r\n        let inActData: ActionData;\r\n\r\n\r\n        let ccActionNames: string[] = Object.keys(this._actionMap);\r\n        for (let ccActionName of ccActionNames) {\r\n            let ccActData = this._actionMap[ccActionName];\r\n            //some keys could map to functions (like reset())\r\n            if (!(ccActData instanceof ActionData)) continue;\r\n            ccActData.exist = false;\r\n\r\n            inActData = inActMap[ccActData.id];\r\n            //in previous version of cc the key value was AnimationGroup rather than ActionData\r\n            //lets accomodate that for backward compatibility\r\n            if (inActData != null) {\r\n                if (inActData instanceof AnimationGroup) {\r\n                    ccActData.ag = inActData;\r\n                    ccActData.name = ccActData.ag.name;\r\n                    ccActData.exist = true;\r\n                    agMap = true;\r\n                    this._hasAnims = true;\r\n                } else if (inActData.exist) {\r\n                    this._hasAnims = true;\r\n                    ccActData.exist = true;\r\n                    if (inActData instanceof Object) {\r\n                        if (inActData.ag) {\r\n                            ccActData.ag = inActData.ag;\r\n                            agMap = true;\r\n                        }\r\n                        if (inActData.name) {\r\n                            ccActData.name = inActData.name;\r\n                        }\r\n                        if (inActData.loop != null) ccActData.loop = inActData.loop;\r\n                        if (inActData.rate) ccActData.rate = inActData.rate;\r\n                        if (inActData.speed) ccActData.speed = inActData.speed;\r\n                        // if (actDataI.key) actDataO.key = actDataI.key;\r\n                        if (inActData.sound) ccActData.sound = inActData.sound;\r\n                    } else {\r\n                        ccActData.name = inActData;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n        //force to play new anims\r\n        this._prevAnim = null;\r\n        if (agMap) return \"ag\"; else return \"ar\";\r\n    }\r\n\r\n    public getActionMap(): ActionMap {\r\n        let map: ActionMap = new ActionMap();\r\n\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let actDataI = this._actionMap[key];\r\n\r\n            if (!(actDataI instanceof ActionData)) continue;\r\n            if (!actDataI.exist) continue;\r\n\r\n            let actDataO: ActionData = map[actDataI.id];\r\n            actDataO.ag = actDataI.ag;\r\n            actDataO.name = actDataI.name;\r\n            actDataO.loop = actDataI.loop;\r\n            actDataO.rate = actDataI.rate;\r\n            actDataO.speed = actDataI.speed;\r\n            actDataO.key = actDataI.key;\r\n            actDataO.sound = actDataI.sound;\r\n            actDataO.exist = actDataI.exist;\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    public getSettings(): CCSettings {\r\n        let ccs: CCSettings = new CCSettings();\r\n        ccs.faceForward = this.isFaceForward();\r\n        ccs.topDown = this.getMode() == 1 ? true : false;\r\n        ccs.turningOff = this.isTurningOff();\r\n        ccs.cameraTarget = this._cameraTarget.clone();\r\n        ccs.cameraElastic = this._cameraElastic;\r\n        ccs.gravity = this._gravity;\r\n        ccs.keyboard = this._ekb;\r\n        ccs.maxSlopeLimit = this._maxSlopeLimit;\r\n        ccs.minSlopeLimit = this._minSlopeLimit;\r\n        ccs.noFirstPerson = this._noFirstPerson;\r\n        ccs.stepOffset = this._stepOffset;\r\n\r\n        return ccs;\r\n    }\r\n\r\n    public setSettings(ccs: CCSettings) {\r\n        this.setFaceForward(ccs.faceForward);\r\n        this.setMode(ccs.topDown ? 1 : 0);\r\n        this.setTurningOff(ccs.turningOff);\r\n        this.setCameraTarget(ccs.cameraTarget);\r\n        this.setCameraElasticity(ccs.cameraElastic);\r\n        this.setGravity(ccs.gravity);\r\n        this.enableKeyBoard(ccs.keyboard);\r\n        this.setSlopeLimit(ccs.minSlopeLimit, ccs.maxSlopeLimit);\r\n        this.setNoFirstPerson(ccs.noFirstPerson);\r\n        this.setStepOffset(ccs.stepOffset);\r\n\r\n    }\r\n\r\n    private _setAnim(anim: ActionData, animName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n\r\n        //animation range need skeleton\r\n        if (!this._isAG && this._skeleton == null) return;\r\n\r\n        if (animName != null) {\r\n            if (this._isAG) {\r\n                if (!(animName instanceof AnimationGroup)) return;\r\n                anim.ag = <AnimationGroup>animName;\r\n                anim.exist = true;\r\n            } else {\r\n                if (this._skeleton.getAnimationRange(anim.name) != null) {\r\n                    anim.name = <string>animName;\r\n                    anim.exist = true;\r\n                } else {\r\n                    anim.exist = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loop != null) anim.loop = loop;\r\n        if (rate != null) anim.rate = rate;\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let act = this._actionMap[key];\r\n                if (!(act instanceof ActionData)) continue;\r\n                if (act.exist) {\r\n                    let ar: AnimationGroup = act.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this._skeleton !== null)\r\n                this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let anim = this._actionMap[key];\r\n                if (!(anim instanceof ActionData)) continue;\r\n                if (anim.exist) {\r\n                    let ar: AnimationGroup = anim.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBack, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack);\r\n    }\r\n    public setWalkBackFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBackFast, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n    }\r\n    public setTurnRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRightFast, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n    }\r\n    public setTurnLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n    }\r\n    public setStrafeRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRightFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n    public setStrafeLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.fall, rangeName, rate, loop);\r\n    }\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._actionMap.walk.key = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._actionMap.walkBack.key = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._actionMap.turnLeft.key = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._actionMap.turnRight.key = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._actionMap.strafeLeft.key = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._actionMap.strafeRight.key = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._actionMap.idleJump.key = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._cameraElastic = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n    /**\r\n     * if av has the required anim (walk, run etc) then \r\n     * mark that anim as existing\r\n     * \r\n     * @param skel \r\n     */\r\n\r\n    private _checkAnimRanges(skel: Skeleton) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim.id) != null) {\r\n                    anim.name = anim.id;\r\n                    anim.exist = true;\r\n                    this._hasAnims = true;\r\n                }\r\n            } else {\r\n                anim.exist = false;\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n\r\n    /**\r\n     * if fast anims do not exist then use their slow counterpart as them but double the rate at which they play\r\n     */\r\n    private _checkFastAnims() {\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack)\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n\r\n    private _copySlowAnims(f: ActionData, s: ActionData) {\r\n        if (f.exist) return;\r\n        if (!s.exist) return;\r\n        f.exist = true;\r\n        f.ag = s.ag;\r\n        f.name = s.name;\r\n        f.rate = s.rate * 2;\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatr too.\r\n     */\r\n    private _mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        this._mode = n;\r\n        this._saveMode = n;\r\n    }\r\n    public getMode() {\r\n        return this._mode;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n    public isTurningOff() {\r\n        return this._noRot;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isRHS = false;\r\n    private _signRHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromFloatArray(<DeepImmutable<Float32Array>>meshMatrix.m, 0);\r\n        const _localY = Vector3.FromFloatArray(<DeepImmutable<Float32Array>>meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromFloatArray(<DeepImmutable<Float32Array>>meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            this._isRHS = true;\r\n            this._signRHS = 1;\r\n        }\r\n        else {\r\n            this._isRHS = false;\r\n            this._signRHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar face  faces forward (true) or backward (false).\r\n     * The avatar face faces forward if its face points to positive local Z axis direction\r\n     */\r\n    private _ffSign: number;\r\n    private _ff: boolean;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        this._ff = b;\r\n        if (this._isRHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n    }\r\n    public isFaceForward() {\r\n        return this._ff;\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (agMap[anim.name] != null) {\r\n                anim.ag = agMap[anim.name];\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // check if any of the mesh on the node tree is refrenced by any animation group\r\n    private _containsAG(node: Node, ags: AnimationGroup[], fromRoot: boolean) {\r\n        let r: Node;\r\n        let ns: Node[];\r\n\r\n        if (fromRoot) {\r\n            r = this._getRoot(node);\r\n            ns = r.getChildren((n) => { return (n instanceof TransformNode) }, false);\r\n        } else {\r\n            r = node;\r\n            ns = [r];\r\n        }\r\n\r\n        for (let ag of ags) {\r\n            let tas: TargetedAnimation[] = ag.targetedAnimations;\r\n            for (let ta of tas) {\r\n                if (ns.indexOf(ta.target) > -1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //get the root of Node\r\n    private _getRoot(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._getRoot(tn.parent);\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        this.enableKeyBoard(true);\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.enableKeyBoard(false);\r\n        this._prevAnim = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n    }\r\n\r\n    private _prevAnim: ActionData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private _fallFrameCountMin: number = 50;\r\n    private _fallFrameCount: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3;\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let anim: ActionData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            anim = this._doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && anim != null) {\r\n            if (this._prevAnim !== anim) {\r\n                if (anim.exist) {\r\n                    if (this._isAG) {\r\n                        if (this._prevAnim != null && this._prevAnim.exist) this._prevAnim.ag.stop();\r\n                        //TODO use start instead of play ?\r\n                        //anim._ag.play(anim._loop);\r\n                        //anim._ag.speedRatio = anim._rate;\r\n                        anim.ag.start(anim.loop, anim.rate);\r\n                    } else {\r\n                        this._skeleton.beginAnimation(anim.name, anim.loop, anim.rate);\r\n                    }\r\n                }\r\n                this._prevAnim = anim;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): ActionData {\r\n\r\n        let anim: ActionData = null;\r\n        anim = this._actionMap.runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let jumpDist: number = 0;\r\n        let disp: Vector3;\r\n        if (this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._actionMap.run.speed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._actionMap.walk.speed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            jumpDist = this._calcJumpDist(this._actionMap.runJump.speed, dt);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            jumpDist = this._calcJumpDist(this._actionMap.idleJump.speed, dt);\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            anim = this._actionMap.idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    anim = this._actionMap.fall;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _calcJumpDist(speed: number, dt: number): number {\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        let js: number = speed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        let jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        return jumpDist;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _doMove(dt: number): ActionData {\r\n\r\n        //initial down velocity\r\n        const u: number = this._movFallTime * this._gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let anim: ActionData = null;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        } else {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    sign = this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeLeft.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeLeftFast.speed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    sign = -this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeRight.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeRightFast.speed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this._mode == 0)):\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._actionMap.run.speed * dt;\r\n                        anim = this._actionMap.run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._actionMap.walk.speed * dt;\r\n                        anim = this._actionMap.walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    horizDist = this._actionMap.walkBack.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.walkBackFast.speed * dt;\r\n                        anim = this._actionMap.walkBackFast;\r\n                    } else {\r\n                        anim = this._actionMap.walkBack;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (!(this._noRot && this._mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._actionMap.turnLeft.speed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            if (this._mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isRHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                let a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._actionMap.turnRight : this._actionMap.turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._actionMap.turnLeft : this._actionMap.turnRight;\r\n                    }\r\n                }\r\n                this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n            } else {\r\n                let a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._actionMap.turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._actionMap.turnRight; }\r\n                }\r\n                this._camera.alpha = this._camera.alpha + turnAngle * a;\r\n            }\r\n        }\r\n\r\n        if (this._mode != 1) {\r\n            if (this._noRot) {\r\n                switch (true) {\r\n                    case (this._act._walk && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n                        break;\r\n                    case (this._act._walkback):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI;\r\n                        break;\r\n                    case (this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 2;\r\n                        break;\r\n                    case (this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 2;\r\n                        break;\r\n                }\r\n            } else {\r\n                this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n                //walking up a slope\r\n                if (this._avatar.position.y > this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    const _slp: number = this._verticalSlope(actDisp);\r\n                    if (_slp >= this._sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this._avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this._avatar.position.y - this._avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this._avatar.position.copyFrom(this._vMovStartPos);\r\n                                this._endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_slp > this._sl1) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this._endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this._avatar.position.y) < this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    if (!(this._areVectorsEqual(actDisp, this._moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                            this._endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this._inFreeFall = true;\r\n                        this._fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this._fallFrameCount > this._fallFrameCountMin) {\r\n                            anim = this._actionMap.fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._fallFrameCount = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): ActionData {\r\n        if (this._grounded) {\r\n            return this._actionMap.idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: ActionData = this._actionMap.idle;\r\n        this._fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        if (this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._actionMap.slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._cameraElastic) this._snapCamera(); }\r\n\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._avatar.visibility = 0;\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this._mode;\r\n                this._mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            this._inFP = false;\r\n            this._mode = this._saveMode;\r\n            this._avatar.visibility = 1;\r\n            this._camera.checkCollisions = this._savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _skip: number = 0;\r\n    private _snapCamera() {\r\n        //            if(this.skip<120) {\r\n        //                this.skip++;\r\n        //                return;\r\n        //            }\r\n        //            this.skip=0;\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n        const pi: PickingInfo = this._scene.pickWithRay(this._ray, (mesh) => {\r\n            //if(mesh==this.avatar||!mesh.isPickable||!mesh.checkCollisions) return false;\r\n            if (mesh == this._avatar || !mesh.checkCollisions) return false;\r\n            else return true;\r\n        }, true);\r\n\r\n        if (pi.hit) {\r\n            //postion the camera in front of the mesh that is obstructing camera\r\n            if (this._camera.checkCollisions) {\r\n                const newPos: Vector3 = this._camera.target.subtract(pi.pickedPoint).normalize().scale(this._cameraSkin);\r\n                pi.pickedPoint.addToRef(newPos, this._camera.position);\r\n            } else {\r\n                const nr: number = pi.pickedPoint.subtract(this._camera.target).length();\r\n                this._camera.radius = nr - this._cameraSkin;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._actionMap.idleJump.key:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _ekb: boolean;\r\n    public enableKeyBoard(b: boolean) {\r\n        this._ekb = b;\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        if (b) {\r\n            canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n        } else {\r\n            canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n        }\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public walkBackFast(b: boolean) {\r\n        this._act._walkback = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnLeftFast(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRightFast(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeLeftFast(b: boolean) {\r\n        this._act._stepLeft = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public strafeRightFast(b: boolean) {\r\n        this._act._stepRight = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    public isAg() {\r\n        return this._isAG;\r\n    }\r\n\r\n\r\n\r\n\r\n    private _findSkel(n: Node): Skeleton {\r\n        let root = this._root(n);\r\n\r\n        if (root instanceof Mesh && root.skeleton) return root.skeleton;\r\n\r\n        //find all child meshes which have skeletons\r\n        let ms = root.getChildMeshes(\r\n            false,\r\n            (cm) => {\r\n                if (cm instanceof Mesh) {\r\n                    if (cm.skeleton) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n\r\n        //return the skeleton of the first child mesh\r\n        if (ms.length > 0) return ms[0].skeleton; else return null;\r\n\r\n    }\r\n\r\n    private _root(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._root(tn.parent);\r\n    }\r\n\r\n    public setAvatar(avatar: Mesh, faceForward: boolean = false): boolean {\r\n\r\n        let rootNode = this._root(avatar);\r\n        if (rootNode instanceof Mesh) {\r\n            this._avatar = rootNode;\r\n        } else {\r\n            console.error(\"Cannot move this mesh. The root node of the mesh provided is not a mesh\");\r\n            return false;\r\n        }\r\n\r\n        this._skeleton = this._findSkel(avatar);\r\n        this._isAG = this._containsAG(avatar, this._scene.animationGroups, true);\r\n\r\n        this._actionMap.reset();\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        return true;\r\n    }\r\n\r\n    public getAvatar() {\r\n        return this._avatar;\r\n    }\r\n\r\n    // force a skeleton to be the avatar skeleton\r\n    // should not be calling this normally\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n\r\n\r\n        if (this._skeleton != null && this._skelDrivenByAG(skeleton)) this._isAG = true; else this._isAG = false;\r\n\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n    }\r\n\r\n\r\n    // this check if any of this skeleton animations is referenced by any targetedAnimation in any of the animationgroup in the scene.\r\n    private _skelDrivenByAG(skeleton: Skeleton) {\r\n        return skeleton.animations.some(sa => this._scene.animationGroups.some(ag => ag.children.some(ta => ta.animation == sa)));\r\n    }\r\n\r\n    public getSkeleton() {\r\n        return this._skeleton;\r\n    }\r\n\r\n    // does this character have any animations ?\r\n    // remember we can use meshes without anims as characters too\r\n    private _hasAnims: boolean = false;\r\n\r\n    /**\r\n     * The avatar/character can be made up of multiple meshes arranged in a hierarchy.\r\n     * As such we will pick the root of the hierarchy as the avatar.\r\n     * The root should be a mesh as otherwise we cannot move it with moveWithCollision() method.\r\n     * \r\n     * Mutiple meshes in the hierarchy may have skeletons (if two or more meshes have skeleton then\r\n     * the skeleton will mostly likely be the same). \r\n     * So we will pick as avatar skeleton, the  skeleton of the first mesh in the hierachy which has\r\n     * a skeleton \r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param actionMap/animationGroupMap \r\n     *        maps actions to animations and other data like speed,sound etc \r\n     *        or \r\n     *        for backward compatibility could be AnimationGroup Map\r\n     * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, actionMap?: {}, faceForward = false) {\r\n\r\n        this._camera = camera;\r\n        this._scene = scene;\r\n\r\n        let success = this.setAvatar(avatar, faceForward);\r\n        if (!success) {\r\n            console.error(\"unable to set avatar\");\r\n        }\r\n\r\n\r\n        let dataType: string = null;\r\n        if (actionMap != null) {\r\n            dataType = this.setActionMap(<ActionMap>actionMap);\r\n        }\r\n\r\n        //try to use the existing avatar animations\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n        //animation groups\r\n        if (this._isAG) {\r\n            //TODO\r\n        }\r\n\r\n\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\n\r\n\r\nclass _Action {\r\n\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n\r\nexport class ActionData {\r\n    public id: string;\r\n    public speed: number;\r\n    //_ds default speed.  speed is set to this on reset\r\n    public ds: number;\r\n    public sound: string;\r\n    public key: string;\r\n    //_dk defailt key\r\n    public dk: string;\r\n\r\n    //animation data\r\n    //if _ag is null then assuming animation range and use _name to play animationrange\r\n    public name: string = \"\";\r\n    public ag: AnimationGroup;\r\n    public loop: boolean = true;\r\n    public rate: number = 1;\r\n\r\n    public exist: boolean = false;\r\n\r\n    public constructor(id?: string, speed = 1, key?: string) {\r\n        this.id = id;\r\n        this.speed = speed;\r\n        this.ds = speed;\r\n        this.key = key;\r\n        this.dk = key;\r\n    }\r\n\r\n    public reset() {\r\n        this.name = \"\";\r\n        this.speed = this.ds;\r\n        this.key = this.dk;\r\n        this.loop = true;\r\n        this.rate = 1;\r\n        this.sound = \"\";\r\n        this.exist = false;\r\n    }\r\n\r\n}\r\n\r\n//not really a \"Map\"\r\nexport class ActionMap {\r\n    public walk = new ActionData(\"walk\", 3, \"w\");\r\n    public walkBack = new ActionData(\"walkBack\", 1.5, \"s\");\r\n    public walkBackFast = new ActionData(\"walkBackFast\", 3, \"na\");\r\n    public idle = new ActionData(\"idle\", 0, \"na\");\r\n    public idleJump = new ActionData(\"idleJump\", 6, \" \");\r\n    public run = new ActionData(\"run\", 6, \"na\");\r\n    public runJump = new ActionData(\"runJump\", 6, \"na\");\r\n    public fall = new ActionData(\"fall\", 0, \"na\");\r\n    public turnLeft = new ActionData(\"turnLeft\", Math.PI / 8, \"a\");\r\n    public turnLeftFast = new ActionData(\"turnLeftFast\", Math.PI / 4, \"na\");\r\n    public turnRight = new ActionData(\"turnRight\", Math.PI / 8, \"d\");\r\n    public turnRightFast = new ActionData(\"turnRightFast\", Math.PI / 4, \"na\");\r\n    public strafeLeft = new ActionData(\"strafeLeft\", 1.5, \"q\");\r\n    public strafeLeftFast = new ActionData(\"strafeLeftFast\", 3, \"na\");\r\n    public strafeRight = new ActionData(\"strafeRight\", 1.5, \"e\");\r\n    public strafeRightFast = new ActionData(\"strafeRightFast\", 3, \"na\");\r\n    public slideBack = new ActionData(\"slideBack\", 0, \"na\");\r\n\r\n    public reset() {\r\n        let keys: string[] = Object.keys(this);\r\n        for (let key of keys) {\r\n            let act = this[key];\r\n            if (!(act instanceof ActionData)) continue;\r\n            act.reset()\r\n        }\r\n    }\r\n};\r\n\r\nexport class CCSettings {\r\n    public faceForward: boolean;\r\n    public gravity: number;\r\n    public minSlopeLimit: number;\r\n    public maxSlopeLimit: number;\r\n    public stepOffset: number;\r\n    public cameraElastic: boolean = true;\r\n    public cameraTarget: Vector3 = Vector3.Zero();\r\n    public noFirstPerson: boolean = false;\r\n    public topDown: boolean = true;\r\n    //turningOff takes effect only when topDown is false\r\n    public turningOff: boolean = true;\r\n    public keyboard: boolean = true;\r\n}\r\n"],"sourceRoot":""}